# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MTdPUOEeP-MhSNcmwl2ipM7L1vbQ-2Qg
"""

from OpenGL.GL import *
from OpenGL.GLUT import *
from OpenGL.GLU import *
import random
import math
from OpenGL.GLUT import GLUT_BITMAP_HELVETICA_18, GLUT_BITMAP_TIMES_ROMAN_24
def draw_text(x, y, text, font=GLUT_BITMAP_HELVETICA_18, color=(1, 1, 1)):
    glColor3f(*color)
    glMatrixMode(GL_PROJECTION)
    glPushMatrix()
    glLoadIdentity()
    gluOrtho2D(0, WIN_W, 0, WIN_H)
    glMatrixMode(GL_MODELVIEW)
    glPushMatrix()
    glLoadIdentity()
    glRasterPos2f(x, y)
    for ch in text:
        glutBitmapCharacter(font, ord(ch))
    glPopMatrix()
    glMatrixMode(GL_PROJECTION)
    glPopMatrix()
    glMatrixMode(GL_MODELVIEW)


def draw_scoreboard():

    glDisable(GL_LIGHTING)
    glDisable(GL_DEPTH_TEST)

    glMatrixMode(GL_PROJECTION)
    glPushMatrix()
    glLoadIdentity()
    gluOrtho2D(0, WIN_W, 0, WIN_H)
    glMatrixMode(GL_MODELVIEW)
    glPushMatrix()
    glLoadIdentity()





    glEnable(GL_BLEND)
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)
    glColor4f(0.0, 0.0, 0.0, 0.7)


    glBegin(GL_QUADS)
    glVertex2f(10, WIN_H - 10)
    glVertex2f(250, WIN_H - 10)
    glVertex2f(250, WIN_H - 140)
    glVertex2f(10, WIN_H - 140)
    glEnd()

    glDisable(GL_BLEND)


    glColor3f(1.0, 1.0, 0.0)
    glLineWidth(2.0)
    glBegin(GL_LINE_LOOP)
    glVertex2f(10, WIN_H - 10)
    glVertex2f(250, WIN_H - 10)
    glVertex2f(250, WIN_H - 140)
    glVertex2f(10, WIN_H - 140)
    glEnd()
    glLineWidth(1.0)

    glPopMatrix()
    glMatrixMode(GL_PROJECTION)
    glPopMatrix()
    glMatrixMode(GL_MODELVIEW)


    draw_text(20, WIN_H - 35, "Galaxy Defender 3D", GLUT_BITMAP_HELVETICA_18, (1.0, 1.0, 0.0))
    draw_text(20, WIN_H - 55, f"Score: {score:,}", GLUT_BITMAP_HELVETICA_18, (0.0, 1.0, 0.0))
    draw_text(20, WIN_H - 75, f"Enemies Killed: {enemies_killed}", GLUT_BITMAP_HELVETICA_18, (1.0, 0.5, 0.5))
    draw_text(20, WIN_H - 95, f"Enemies Active: {len(enemies)}", GLUT_BITMAP_HELVETICA_18, (1.0, 0.2, 0.2))
    draw_text(20, WIN_H - 115, f"Breaches: {breaches}/{BREACH_LIMIT}", GLUT_BITMAP_HELVETICA_18, (1.0, 0.8, 0.2))
    draw_text(20, WIN_H - 135, f"Giants: {len(red_dots)}", GLUT_BITMAP_HELVETICA_18, (1.0, 0.2, 0.2))
    draw_text(20, WIN_H - 155, f"Stage: {stage}", GLUT_BITMAP_HELVETICA_18, (0.6, 0.8, 1.0))
    draw_text(20, WIN_H - 155, f"Stage: {stage}", GLUT_BITMAP_HELVETICA_18, (0.6, 0.8, 1.0))
    if cheat_mode:
        draw_text(20, WIN_H - 175, "CHEAT MODE ACTIVE", GLUT_BITMAP_HELVETICA_18, (1.0, 0.2, 1.0))
    glEnable(GL_DEPTH_TEST)


    glEnable(GL_DEPTH_TEST)


def draw_grid():
    glDisable(GL_LIGHTING)
    glColor3f(0.2, 0.25, 0.3)
    glBegin(GL_QUADS)
    glVertex3f(-GRID_LENGTH, -GRID_LENGTH, 0)
    glVertex3f(GRID_LENGTH, -GRID_LENGTH, 0)
    glVertex3f(GRID_LENGTH, GRID_LENGTH, 0)
    glVertex3f(-GRID_LENGTH, GRID_LENGTH, 0)
    glEnd()


    glColor3f(0.15, 0.18, 0.22)
    glBegin(GL_LINES)
    step = 60
    for i in range(-GRID_LENGTH, GRID_LENGTH + 1, step):
        glVertex3f(i, -GRID_LENGTH, 0)
        glVertex3f(i, GRID_LENGTH, 0)
        glVertex3f(-GRID_LENGTH, i, 0)
        glVertex3f(GRID_LENGTH, i, 0)
    glEnd()


def setup_lighting():
    glEnable(GL_LIGHTING)
    glEnable(GL_LIGHT0)
    light_pos = [300.0, 400.0, 500.0, 1.0]
    glLightfv(GL_LIGHT0, GL_POSITION, light_pos)
    glLightfv(GL_LIGHT0, GL_DIFFUSE, [0.9, 0.9, 0.9, 1.0])
    glLightfv(GL_LIGHT0, GL_SPECULAR, [0.6, 0.6, 0.6, 1.0])


def draw_temple():
    glPushMatrix()
    glTranslatef(*TEMPLE_POS)
    glColor3f(0.7, 0.6, 0.5)

    glPushMatrix()
    glScalef(2.5, 2.5, 0.5)
    glutSolidCube(TEMPLE_RADIUS)
    glPopMatrix()

    glColor3f(0.8, 0.75, 0.65)
    for dx in (-TEMPLE_RADIUS, TEMPLE_RADIUS):
        for dz in (-TEMPLE_RADIUS, TEMPLE_RADIUS):
            glPushMatrix()
            glTranslatef(dx*0.6, dz*0.6, TEMPLE_RADIUS)
            quad = gluNewQuadric()
            gluCylinder(quad, 12, 12, 120, 12, 1)
            glPopMatrix()

    glPushMatrix()
    glTranslatef(0, 0, TEMPLE_RADIUS*1.2 + 120)
    quad = gluNewQuadric()

    gluCylinder(quad, TEMPLE_RADIUS*1.2, 10, 80, 16, 1)
    glPopMatrix()
    glPopMatrix()


def draw_player():
    """Draw a detailed human figure"""
    glPushMatrix()
    glTranslatef(player_pos[0], player_pos[1], player_pos[2])
    glRotatef(player_yaw_deg, 0, 0, 1)


    glPushMatrix()
    glTranslatef(0, 0, 45)
    glColor3f(0.9, 0.8, 0.7)
    glutSolidSphere(8, 12, 12)
    glPopMatrix()


    glPushMatrix()
    glTranslatef(0, 0, 35)
    glColor3f(0.9, 0.8, 0.7)
    glScalef(0.4, 0.4, 0.6)
    glutSolidCube(12)
    glPopMatrix()


    glPushMatrix()
    glTranslatef(0, 0, 20)
    glColor3f(0.2, 0.4, 0.8)
    glScalef(1.5, 0.8, 1.8)
    glutSolidCube(18)
    glPopMatrix()


    glPushMatrix()
    glTranslatef(0, 0, 5)
    glColor3f(0.1, 0.2, 0.6)
    glScalef(1.2, 0.7, 0.8)
    glutSolidCube(16)
    glPopMatrix()


    glPushMatrix()
    glTranslatef(-6, 0, -10)
    glColor3f(0.1, 0.1, 0.3)
    glScalef(0.7, 0.7, 1.2)
    glutSolidCube(18)
    glPopMatrix()

    glPushMatrix()
    glTranslatef(6, 0, -10)
    glColor3f(0.1, 0.1, 0.3)
    glScalef(0.7, 0.7, 1.2)
    glutSolidCube(18)
    glPopMatrix()


    glPushMatrix()
    glTranslatef(-6, 0, -25)
    glColor3f(0.1, 0.1, 0.3)
    glScalef(0.6, 0.6, 1.0)
    glutSolidCube(16)
    glPopMatrix()


    glPushMatrix()
    glTranslatef(6, 0, -25)
    glColor3f(0.1, 0.1, 0.3)
    glScalef(0.6, 0.6, 1.0)
    glutSolidCube(16)
    glPopMatrix()


    glPushMatrix()
    glTranslatef(-6, -8, -35)
    glColor3f(0.2, 0.1, 0.05)
    glutSolidCube(12)
    glPopMatrix()


    glPushMatrix()
    glTranslatef(6, -8, -35)
    glColor3f(0.2, 0.1, 0.05)
    glScalef(0.7, 1.2, 0.4)
    glutSolidCube(12)
    glPopMatrix()


    glPushMatrix()
    glTranslatef(-15, 0, 18)
    glColor3f(0.9, 0.8, 0.7)
    glRotatef(10, 1, 0, 0)
    glScalef(0.5, 0.5, 1.0)
    glutSolidCube(20)
    glPopMatrix()


    glPushMatrix()
    glTranslatef(-15, -5, 3)
    glColor3f(0.9, 0.8, 0.7)
    glRotatef(15, 1, 0, 0)
    glScalef(0.4, 0.4, 0.8)
    glutSolidCube(18)
    glPopMatrix()


    glPushMatrix()
    glTranslatef(-15, -8, -8)
    glColor3f(0.9, 0.8, 0.7)
    glutSolidSphere(4, 10, 10)
    glPopMatrix()


    glPushMatrix()
    glTranslatef(15, 0, 18)
    glColor3f(0.9, 0.8, 0.7)
    glRotatef(-20, 1, 0, 0)
    glScalef(0.5, 0.5, 1.0)
    glutSolidCube(20)
    glPopMatrix()


    glPushMatrix()
    glTranslatef(15, 10, 8)
    glColor3f(0.9, 0.8, 0.7)
    glRotatef(45, 1, 0, 0)
    glScalef(0.4, 0.4, 0.8)
    glutSolidCube(18)
    glPopMatrix()


    glPushMatrix()
    glTranslatef(15, 15, 0)
    glColor3f(0.9, 0.8, 0.7)
    glutSolidSphere(4, 10, 10)
    glPopMatrix()


    glPushMatrix()
    glTranslatef(15, 20, 2)
    glColor3f(0.3, 0.3, 0.3)
    glRotatef(90, 0, 1, 0)
    glScalef(0.4, 1.0, 0.4)
    glutSolidCube(22)
    glPopMatrix()


    glPushMatrix()
    glTranslatef(15, 30, 2)
    glColor3f(0.1, 0.1, 0.1)
    glRotatef(90, 1, 0, 0)
    quad = gluNewQuadric()
    gluCylinder(quad, 3, 3, 25, 8, 1)
    glPopMatrix()


    glPushMatrix()
    glTranslatef(15, 18, -5)
    glColor3f(0.4, 0.2, 0.1)
    glScalef(0.3, 0.6, 0.8)
    glutSolidCube(15)
    glPopMatrix()

    glPopMatrix()


def draw_enemy(enemy):
    glPushMatrix()
    glTranslatef(enemy['pos'][0], enemy['pos'][1], enemy['pos'][2])
    glRotatef(enemy.get('yaw', 0.0), 0, 0, 1)


    glPushMatrix()
    glColor3f(0.7, 0.1, 0.1)
    glTranslatef(0, 0, 18)
    glScalef(1.4, 0.8, 1.6)
    glutSolidCube(18)
    glPopMatrix()


    glPushMatrix()
    glColor3f(0.95, 0.8, 0.7)
    glTranslatef(0, 0, 36)
    glutSolidSphere(7, 10, 10)
    glPopMatrix()


    glPushMatrix()
    glColor3f(0.2, 0.05, 0.05)
    glTranslatef(-5, 0, 6)
    glScalef(0.6, 0.6, 1.2)
    glutSolidCube(16)
    glPopMatrix()


    glPushMatrix()
    glColor3f(0.2, 0.05, 0.05)
    glTranslatef(5, 0, 6)
    glScalef(0.6, 0.6, 1.2)
    glutSolidCube(16)
    glPopMatrix()


    glPushMatrix()
    glColor3f(0.85, 0.7, 0.7)
    glTranslatef(-12, 0, 20)
    glScalef(0.4, 0.4, 0.9)
    glutSolidCube(16)
    glPopMatrix()

    glPushMatrix()
    glColor3f(0.85, 0.7, 0.7)
    glTranslatef(12, 0, 20)
    glScalef(0.4, 0.4, 0.9)
    glutSolidCube(16)
    glPopMatrix()

    glPopMatrix()


def draw_bullet(b):
    glPushMatrix()
    glTranslatef(b['pos'][0], b['pos'][1], b['pos'][2])
    glColor3f(1.0, 0.9, 0.1)
    glutSolidSphere(b['radius'], 10, 10)
    glPopMatrix()


def draw_red_dot(dot):
    for dot in red_dots:
      vx = TEMPLE_POS[0] - dot['pos'][0]
      vy = TEMPLE_POS[1] - dot['pos'][1]
      len_v = math.hypot(vx, vy) + 1e-6
      vx /= len_v
      vy /= len_v
      dot['pos'][0] += vx * dot['speed']
      dot['pos'][1] += vy * dot['speed']
    glPushMatrix()
    glTranslatef(dot['pos'][0], dot['pos'][1], dot['pos'][2])
    glColor3f(0.1, 0.3, 1.0)
    glutSolidSphere(dot['radius'], 10, 10)
    glPopMatrix()